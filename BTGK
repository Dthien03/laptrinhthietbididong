import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quản lý công việc',
      theme: ThemeData(
        primarySwatch: Colors.yellow,
      ),
      home: TaskManager(),
    );
  }
}

class Task {
  final String title;
  final DateTime deadline;
  bool isComplete;

  Task({
    required this.title,
    required this.deadline,
    this.isComplete = false,
  });
}

class TaskManager extends StatefulWidget {
  @override
  _TaskManagerState createState() => _TaskManagerState();
}

class _TaskManagerState extends State<TaskManager> {
  final List<Task> _tasks = [
    Task(
      title: 'đi chơi',
      deadline: DateTime.now().add(Duration(days: 1)),
    ),
    Task(
      title: 'đi học',
      deadline: DateTime.now().add(Duration(days: 3)),
    ),
    Task(
      title: 'ở nhà',
      deadline: DateTime.now().add(Duration(days: 7)),
    ),
  ];

  void _addTask(Task task) {
    setState(() {
      _tasks.add(task);
    });
  }

  void _deleteTask(Task task) {
    setState(() {
      _tasks.remove(task);
    });
  }

  void _toggleTaskComplete(Task task) {
    setState(() {
      task.isComplete = !task.isComplete;
    });
  }

  void _showAddTaskDialog() async {
    final newTask = await showDialog<Task>(
      context: context,
      builder: (context) => AddTaskDialog(),
    );

    if (newTask != null) {
      _addTask(newTask);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quản lý công việc'),
      ),
      body: ListView.builder(
        itemCount: _tasks.length,
        itemBuilder: (context, index) {
          final task = _tasks[index];
          final isOverdue =
              task.deadline.isBefore(DateTime.now()) && !task.isComplete;
          return ListTile(
            title: Text(
              task.title,
              style: TextStyle(
                decoration: isOverdue ? TextDecoration.lineThrough : null,
                color: isOverdue ? Colors.red : null,
              ),
            ),
            subtitle: Text(
              'Deadline: ${task.deadline}',
              style: TextStyle(
                color: isOverdue ? Colors.red : null,
              ),
            ),
            trailing: Checkbox(
              value: task.isComplete,
              onChanged: (value) => _toggleTaskComplete(task),
            ),
            onLongPress: () => _deleteTask(task),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddTaskDialog,
        child: Icon(Icons.add),
      ),
    );
  }
}

class AddTaskDialog extends StatefulWidget {
  @override
  _AddTaskDialogState createState() => _AddTaskDialogState();
}

class _AddTaskDialogState extends State<AddTaskDialog> {
  final _titleController = TextEditingController();
  DateTime _deadline = DateTime.now();

  @override
  void dispose() {
    _titleController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Công việc mới'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            controller: _titleController,
            decoration: InputDecoration(
              labelText: 'Nhập công việc',
            ),
          ),
          SizedBox(height: 16),
          TextButton(
            onPressed: () async {
              final pickedDate = await showDatePicker(
                context: context,
                initialDate: DateTime.now(),
                firstDate: DateTime.now(),
                lastDate: DateTime(2100),
              );
              if (pickedDate != null) {
                setState(() {
                  _deadline = pickedDate;
                });
              }
            },
            child: Text(
                'Deadline: ${_deadline.year}-${_deadline.month}-${_deadline.day}'),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: Text('thoát'),
        ),
        ElevatedButton(
          onPressed: () {
            final newTask = Task(
              title: _titleController.text.trim(),
              deadline: _deadline,
            );
            Navigator.of(context).pop(newTask);
          },
          child: Text('thêm'),
        ),
      ],
    );
  }
}
